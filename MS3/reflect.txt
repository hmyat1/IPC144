/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  :Hla Myint Myat
Student ID#:185923216
Email      :hmyat1@myseneca.ca
Section    :NRB

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1.a)void viewAllAppointments(struct ClinicData* data);With the help of this function, users can view all of their planned appointments in date- and time-based order. The appointments are arranged according to year, month, day, hour, and minute, in ascending order. Clients will find it simpler to easily scan the schedule and find available appointments. It uses the data structure of the clinic as an argument.Value and PurposeBy giving users a thorough overview of all appointments, this feature helps the user experience and helps clinic workers to effectively manage patients and their schedule. This function makes it simple to identify those.b)void viewAppointmentSchedule(struct ClinicData* data);Because of this function, users can view the appointment schedule for a certain date. When users enter a year, month, and day, the feature lists all appointments that are set for that specific date.Value and purposeThis function enable users to efficiently plan the days and manage patient appointments by providing easy access to scheduling for a certain day. It helps clinic workers in finding availability or spotting possible scheduling problems on a certain date.c)void addAppointment(struct Appointment *appointments, int maxAppointments, struct Patient *patients, int maxPatient);The appointment array can be modified or modified by the clinic staff using this function to add additional appointment records. Patients' numbers, years, months, days, hours, and minutes are entered by users. Additionally, the function verifies that the input data complies with the clinic's scheduling requirements.Value and PurposeThis function makes it easier to add new appointments to the system.  It helps prevent issues with scheduling and makes sure appointments are properly entered in the system by validating inputs and looking for conflicts.These functions helped us to organize, view, and alter appointments, enhancing user experience and effective patient management. The tool is more user-friendly and efficient at assisting clinic workers with their scheduling needs because of the flexible sorting, date-specific viewing, and appointment addition capabilities.2. int getInputWithValidation(const char *prompt, int minValue, int maxValue) {    int input;    while (1) {        printf("%s", prompt);        if (scanf("%d", &input) != 1 || input < minValue || input > maxValue) {            printf("Invalid input. Please enter a value between %d and %d.\n", minValue, maxValue);            clearInputBuffer(); // Clear the input buffer in case of invalid input        } else {            break;        }    }    return input;}This getInputWithValidation function has three parameters: a prompt, a minimum value, and a maximum value. The user is prompted until a valid input that falls within the predetermined range is given. In the case of invalid input, the input buffer is cleared using the clearInputBuffer function.By using this method, we can have a single place to handle input with validation and minimize the repetition of validation logic in our primary tasks.  The code may become easier to read and maintain. The code can be made even more flexible by extending this method to deal with input that is not an integer.3.a) viewAllAppointments This function focuses mainly on sorting and displaying the whole appointment schedule. By putting it in a module devoted to scheduling-related processes, we can maintain the code's flexibility and structure.  The display format and sorting the method are strongly related to the scheduling possibilities.  It is simpler to manage and maintain if this function is divided into a separate module, especially if the scheduling component may need to undergo changes or improvements in the future.b) viewAppointmentScheduleThis function is also directly related to appointment display and scheduling. Given that both deal with providing the user with appointment details, it makes sense to group it with the first function. By putting them in the same part, it is possible to avoid duplicate date-handling logic and to manage appointment display based on various parameters with a common approach.c) addAppointmentThis function is in charge of inserting new appointment entries as necessary.  We clearly separate the issues by putting it in a different section that is only dealing with appointment-related procedures. This makes it simpler to maintain and add new appointment management functions while also keeping the source code organized.  The single responsibility idea is appropriately reflected by separating this function into a separate part, improving the readability and maintainability of the code.